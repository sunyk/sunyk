package com.concurrent.read.mysql;

/**
 * created on sunyang 2018/7/23 17:22
 * Are you different!"jia you" for me
 */
public class M8 {
    /**
     * 数据库索引的原理
     * 想要理解索引原理必须清楚一种数据结构「平衡树」(非二叉)，也就是b tree或者 b+ tree
     * 平衡树结构，换句话说，就是整个表就变成了一个索引。也就是所谓的「聚集索引」，这就是为什么一个表只能有一个主键，
     * 一个表只能有一个聚集索引，因为主键的作用就是把表的数据格式转换成索引平衡树的格式放置.
     * 树的查询方式：
     * 查询次数是以树的分叉数为底，记录总数的对数，用公式来表示：
     * log记录总数
     *    树的分叉数    =  查询次数
     * 树公式：用程序来表示就是Math.Log(100000000,10)，100000000是记录数，10是树的分叉数
     * 结果就是查找次数，这里的结果从亿降到了个位数。因此，利用索引会使数据库查询有惊人的性能提升。
     *
     *
     *
     *
     * 概念
     * 1.为什么要给表加上主键？
     * 就是整个表就变成了一个索引。也就是所谓的「聚集索引」，这就是为什么一个表只能有一个主键
     * 2.为什么加索引后会使查询变快？
     * 查询次数是以树的分叉数为底，记录总数的对数，用公式来表示：
     *      * log记录总数
     *      *    树的分叉数    =  查询次数
     *      * 树公式：用程序来表示就是Math.Log(100000000,10)，100000000是记录数，10是树的分叉数
     *      * 结果就是查找次数，这里的结果从亿降到了个位数。因此，利用索引会使数据库查询有惊人的性能提升。
     *
     * 3.为什么加索引后会使写入，修改，删除变慢？
     * 因为平衡树这个结构必须一直维持在一个正确的状态， 增删改数据都会改变平衡树各节点中的索引数据内容，破坏树结构，
     * 因此，在每次数据改变时， DBMS必须去重新梳理树（索引）的结构以确保它的正确，这会带来不小的性能开销，
     * 也就是为什么索引会给查询以外的操作带来副作用的原因。
     * 4.什么情况下要同时在两个字段上建索引？
     * create index index_birthday_and_user_name on user_info(birthday, user_name);
     * 通过非聚集索引index_birthday_and_user_name查找birthday等于1991-11-1的叶节点的内容，然而， 叶节点中除了有user_name表主键ID的值以外，
     * user_name字段的值也在里面， 因此不需要通过主键ID值的查找数据行的真实所在， 直接取得叶节点中user_name的值返回即可。
     * 通过这种覆盖索引直接查找的方式， 可以省略不使用覆盖索引查找的后面两个步骤， 大大的提高了查询性能。
     *
     * 非聚集索引和聚集索引的区别：
     * 在于， 通过聚集索引可以查到需要查找的数据， 而通过非聚集索引可以查到记录对应的主键值 ， 再使用主键的值通过聚集索引查找到需要的数据。
     * 不管以任何方式查询表， 最终都会利用主键通过聚集索引来定位到数据， 聚集索引（主键）是通往真实数据所在的唯一路径。
     * 然而， 有一种例外可以不使用聚集索引就能查询出所需要的数据， 这种非主流的方法 称之为「覆盖索引」查询，
     * 也就是平时所说的复合索引或者多字段索引查询。
     *
     *
     * 创建索引的好处是什么？
     * 第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。
     *
     * 第二，可以大大加快数据的检索速度，这也是创建索引的最主要的原因。
     *
     * 第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。
     *
     * 第四，在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。
     *
     * 第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。
     *
     * 增加索引也有许多不利的方面是什么？
     * 第一，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。
     *
     * 第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。
     *
     * 第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。
     *
     *
     *
     *
     */
}
